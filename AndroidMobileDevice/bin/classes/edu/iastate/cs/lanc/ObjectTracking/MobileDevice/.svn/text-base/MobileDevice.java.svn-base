package edu.iastate.cs.lanc.ObjectTracking.MobileDevice;

import java.net.InetAddress;
import java.nio.ByteBuffer;

import edu.iastate.cs.lanc.ObjectTracking.MobileDevice.POJO.*;
import MyUtil.datatype.DATATYPE_CONST;
import MyUtil.datatype.DEBUG;
import MyUtil.datatype.DebugWindow;
import MyUtil.datatype.U32;
import MyUtil.netcomm.*;

import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

public class MobileDevice 
{
	static MobileDeviceStatus 				myStatus;
	static MobileDeviceRPCSenderImpl		myRPCSender;
	static MobileDeviceEventSenderImpl  	myEventSender;
	static MobileDeviceEventReceiverImpl  	myEventReceiver;
	static boolean JustPowerOn = true;
	static boolean readyForLocationUpdate = false;
	
	protected static GPSReader myGPSReader = null;
	
	static int 		myID; 
	static String 	myIP;
	static String 	myServerIP = null;
	static int 		myServerPort = NETCOMM_CONST.SERVER_RPC_SERVICE_PORT;
	static String 	myLocationFile = null;
	static int		locationReadPeriod = 1000;
	
	public static void main(String args[])
	{
		// set default server and port
		myServerIP = myIP;
		myServerPort = NETCOMM_CONST.SERVER_RPC_SERVICE_PORT;
		
		// get parameters: myServerIP, myLocationFile 
		for (int i=0; i<args.length; i++)
		{
			System.out.println(args[i]);
			
			if (args[i].equals("-SIP"))
			{
				myServerIP = args[i+1];
			}
			else
			if (args[i].equals("-SIM"))
			{
				myLocationFile = args[i+1];
			}
			else
			if (args[i].equals("-DID"))
			{
				myID = Integer.parseInt(args[i+1]);
			}
			else
			if (args[i].equals("-PORT"))
			{
				myServerPort = Integer.parseInt(args[i+1]);
			}
		}

		myStatus = MobileDeviceStatus.getInstance();
		
		sendUIMessage("DID = " + myID + " myServerIP = " + myServerIP + "; myLocationFile = " + myLocationFile);
		
		myStatus = MobileDeviceStatus.getInstance();
		
		//ObjectServer myServer = ObjectServer.getInstance();
		//myServer.setIP(myServerIP);
		//myServer.setPort(myServerPort);

		//myID = requestDID(myServerIP, myServerPort, "yingcai@cs.iastate.edu", "5152946075");
		//System.out.println("new did = " + did);
		
		Region myDomain = new Region();
		myDomain.setRegionShape(Region.RECTANGLE);
		myDomain.setRadius(5);
		myDomain.setUpperX(0);
		myDomain.setUpperY(0);
		myDomain.setLowerX(0);
		myDomain.setLowerY(0);
		
		LocationUpdatePolicy lup = new LocationUpdatePolicy(LocationUpdatePolicy.PERIODIC);
		
		
		myStatus.setMyID(myID);
		myStatus.setMyCurServerIP(myServerIP);
		myStatus.setMyCurServerPort(myServerPort);
		
		myStatus.setMyDomain(myDomain);
		myStatus.setMyLoad(5);
		myStatus.setMyLocationUpdatePolicy(lup);
		myStatus.setMyZone(myDomain);
		
		sendUIMessage("DID = " + myID + " myServerIP = " + myServerIP + "; myLocationFile = " + myLocationFile);
		
		init();
		
		startPseudoGPSReader();
	}
	
	public static void init()
	{
		myStatus = MobileDeviceStatus.getInstance();
			
		// initialize myRPCSender;
		myRPCSender = new MobileDeviceRPCSenderImpl(myStatus.getMyCurServerIP(),  myStatus.getMyCurServerPort(), myStatus.getMyID());
		
		// initialize myEventSender;
		myEventSender = new MobileDeviceEventSenderImpl(myStatus.getMyCurServerIP(),  myStatus.getMyCurServerPort(), myStatus.getMyID());

		//initialize myEventReceiver and let it run
		myEventReceiver = new MobileDeviceEventReceiverImpl(myStatus.getMyCurServerIP(),  myStatus.getMyCurServerPort(), myStatus.getMyID());
		myEventReceiver.start();
		

        //DEBUG.println("MobileDevice.myStatus = " + myStatus.toString());
        
		readyForLocationUpdate = true;
	}
	
	private static void startPseudoGPSReader()
	{
        //if running as a simulator, initialize GPS		
        if (myGPSReader == null)    
        {
        	myGPSReader = new PseudoGPSReader(myLocationFile);
        	TimeStampedLocation myLocation = new TimeStampedLocation(-90, -128, 3, 4);

	        while (true)
	        {
	        	if (myLocationFile != null)
	        	{
	        		locationReadPeriod = ((PseudoGPSReader) myGPSReader).getSamplingInterval();
	        	}

	        	//System.out.println("locationReadPeriod = " + locationReadPeriod);
	        	
	        	// read GPS periodically at the required frequency
	        	sleep(locationReadPeriod);
	        	
	        	myGPSReader.read(myLocation);
	        	
	        	System.out.println("X = " + myLocation.getX() + ", Y = " + myLocation.getY() + ", Z = " + myLocation.getZ() + ", T = " + myLocation.getT());
	        	updateLocation(myLocation);
	        }
        }	
	}

	synchronized public static void updateLocation(TimeStampedLocation tsl)
	{
		//System.out.println("MobileDevice.updateLocation called");
		
		if (!readyForLocationUpdate) return;

		if (JustPowerOn) // the first time call
		{
			JustPowerOn = false;
			
	        // initialize myStatus
			myStatus = MobileDeviceStatus.getInstance();
	        myStatus.setMyID(myID);
	        
	        myStatus.setMyLocation(new TimeStampedLocation(0, 0, 0, 0));
	        
	        Region myZone = new Region(0, 0, 25);
	        myStatus.setMyZone(myZone);
	        
			myStatus.setMyLocation(tsl);
			
	        // ask for resident domain and geopage list
	        myRPCSender.RequestResidentDomain(myStatus);
	        
	        return;
		}
		
		/*
		// check the trigger of each geopage
		myStatus.checkGeopageTrigger(tsl);
		
		// check if moving out of resident domain		
		if (myStatus.moveOutOfResidentDomain(tsl))
		{
			myStatus.emptyGeopageList();
			myRPCSender.RequestResidentDomain(myStatus);
		}
		*/
		
		myStatus.setMyLocation(tsl);
		
		//System.out.println("myStatus.getMyLocationUpdatePolicy().getUpdatePolicy() = " + myStatus.getMyLocationUpdatePolicy().getUpdatePolicy());
		if (myStatus.getMyLocationUpdatePolicy().getUpdatePolicy() == LocationUpdatePolicy.PERIODIC)
		{
			myEventSender.UpdateLocation(myStatus);
			//System.out.println("myStatus.time = " + (new Date(myStatus.getMyLocation().getT())).toString());
		}
		
		//sendUIMessage("NICE SHOOT");
	}
	
	public static void setGPSReader(GPSReader r)
	{
		myGPSReader = r;
	}
	
    private static void sleep(int t)
    {
    	try
    	{
    		Thread.sleep(t);  
    	} 
    	catch (InterruptedException ie)
    	{
    		System.out.println(ie.getMessage());
    	}
    }

   
    public static String getLocalIP()
    {
        String TempIP = null;
        InetAddress LocalIP = null;

        try
        {
            LocalIP = InetAddress.getLocalHost();
            TempIP  = LocalIP.getHostAddress();
        }
        catch (Exception e)
        {
            System.out.println("Fatal Error: Cannot find this machine's IP\n");
            System.exit(0);
        }
        
        return TempIP;
    }
    
    public static void sendUIMessage(String msg)
    {
    	System.out.println(msg);
    	
		myStatus = MobileDeviceStatus.getInstance();
    	Handler UIhandler = myStatus.getMiddleHandler();    	
    	
    	if (UIhandler == null) return;
    	
    	Message clientMsg = Message.obtain();
    	Bundle b = new Bundle();
    	b.putString("message", msg);
    	clientMsg.setData(b);
    	UIhandler.sendMessage(clientMsg);    	
    }
    
    public static boolean ready()
    {
    	return readyForLocationUpdate;
    }

    public static int requestDID(String ip, int port, String email, String phone)
    {
    	MobileDeviceRPCSenderImpl tmpRPCSender = new MobileDeviceRPCSenderImpl(ip, port, -1);
	
    	int did = tmpRPCSender.RequestDID(email, phone); 
	
    	tmpRPCSender.close();
    	
    	return did;
    }
    
    public static String getServerIP()
    {
    	if(myServerIP == null)
    		return "129.186.69.65";
    	else return myServerIP;
    }
    
    public static int getServerPort()
    {
         return myServerPort;
    	
    }
}

